#!/usr/bin/env node

// if check init thing if not init call init

const PORT = '3000';
/**
 * start dependencies
*/
var app = require('../app');
var http = require('http');

/**
 * Get port from environment and store in Express.
*/

var port = normalizePort(process.env.PORT || PORT);
app.set('port', port);

/**
 * Create HTTP server
 */
var server = http.createServer(app);

/**
 * Begin Listening
 */

console.log('listening on port:' + PORT);
server.listen(port);
server.on('error', onError);

 /**
  * Normalize a port into a number, string, or false.
  */
 function normalizePort(val) {
   var port = parseInt(val, 10);

   if (isNaN(port)) {
     // named pipe
     return val;
   }

   if (port >= 0) {
     // port number
     return port;
   }

   return false;
 }

 /**
  * Event listener for HTTP server "error" event.
  */

function onError(error) {
  console.log('Not sure if this is ever called');
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
    }
}
